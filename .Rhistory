}
allchi$lastvcm <- lastvcm
## 2.1 exclude those >2s after last adu utt (they may be starting a new conversation)
allchi_loop<- allchi %>%
select(time_start, time_end, source, ptcp, spkr, response, lastresp, lastvcm) %>%
right_join(UTTdat) %>%
mutate(lastresp = ifelse(is.na(lastresp), "adult", lastresp)) %>%
arrange(source, time_start)
file <- allchi_loop$source
start <- allchi_loop$time_start
end <- allchi_loop$time_end
lastresp <- allchi_loop$lastresp
spkr <- allchi_loop$spkr_bi
for (i in 2:length(start)) {
if (lastresp[i] == "yes" &
file[i-1] == file[i] &
spkr[i-1] != spkr[i] &
end[i-1] + 2 < start[i]){
lastresp[i] <- "no"
} else {
lastresp[i] <- lastresp[i]
}}
allchi_loop$lastresp <- lastresp
## 2.2 differentiate "no" into initial utt and chi self continue
###### no difference between the two in the general model
# file <- allchi_loop$source
# start <- allchi_loop$time_start
# end <- allchi_loop$time_end
# lastresp <- allchi_loop$lastresp
# spkr <- allchi_loop$spkr_bi
# for (i in 2:length(start)) {
#  if(lastresp[i] == "no" &
#       file[i-1] == file[i] &
#       end[i-1] + 2 < start[i]){
#     lastresp[i] <- "initial"
#   } else if(lastresp[i] == "no" &
#       file[i-1] == file[i] &
#       spkr[i-1] == spkr[i] &
#       end[i-1] + 2 >= start[i]){
#     lastresp[i] <- "continue"
#   } else
#     lastresp[i] <- lastresp[i]
# }
# allchi_loop$lastresp <- lastresp
View(allchi_loop)
View(allinter)
test <- inner_join(allchi_loop, allinter)
View(UTTdat)
View(test)
View(allinter)
write_csv(allchi_loop)
write_csv(allchi_loop, "int.csv")
writexl::write_xlsx(allchi_loop, "int.xlsx")
allinter <- readxl::read_xlsx("int.xlsx")
library(papaja)
library(tidyverse)
library(here)
library(ggridges)
library(lme4)
library(lmerTest)
library(ggpubr)
library(cowplot)
r_refs("TseltalTurntaking.bib")
knitr::opts_chunk$set(warning = FALSE)
## can the presence or absence of language-like element in a child’s vocalization be predicted by whether the child’s most recent vocalization had received a response or not?
loopmod <- allinter %>%
mutate(vcm = ifelse(vcm=="C", 1, 0),
lex = ifelse(lex=="W",1,0),
lastlex = ifelse(lastvcm=="LEX",1,0),
lastcb = ifelse(lastvcm=="CB",1,0)) %>%
filter(spkr_bi == "CHI",
lastresp != "unknown",
lastresp != "adult")
# exclude children < 6 mo who don't produce lexical speech
loopmod_loop_lex <- loopmod %>% filter(agebin != "(0,6]") %>% droplevels()
mod_loop_lex <- glmer(lex ~ agebin * lastresp + lastlex +
(1 |ptcp),
family = binomial,
loopmod_loop_lex)
## effect still exists when we treat age as a continuous variable
meanage_lex <- mean(loopmod_loop_lex$age)
sdage_lex <- sd(loopmod_loop_lex$age)
loopmod_loop_lex_alt <- loopmod_loop_lex %>% mutate(age_scaled = (age - meanage_lex)/sdage_lex)
mod_loop_lex_alt <- glmer(lex ~ age_scaled * lastresp + lastlex +
(1 |ptcp),
family = binomial,
loopmod_loop_lex_alt)
summary(mod_loop_lex)
View(allchi_loop)
## can the presence or absence of language-like element in a child’s vocalization be predicted by whether the child’s most recent vocalization had received a response or not?
loopmod <- allchi_loop %>%
mutate(vcm = ifelse(vcm=="C", 1, 0),
lex = ifelse(lex=="W",1,0),
lastlex = ifelse(lastvcm=="LEX",1,0),
lastcb = ifelse(lastvcm=="CB",1,0)) %>%
filter(spkr_bi == "CHI",
lastresp != "unknown",
lastresp != "adult")
# exclude children < 6 mo who don't produce lexical speech
loopmod_loop_lex <- loopmod %>% filter(agebin != "(0,6]") %>% droplevels()
mod_loop_lex <- glmer(lex ~ agebin * lastresp + lastlex +
(1 |ptcp),
family = binomial,
loopmod_loop_lex)
## effect still exists when we treat age as a continuous variable
meanage_lex <- mean(loopmod_loop_lex$age)
sdage_lex <- sd(loopmod_loop_lex$age)
loopmod_loop_lex_alt <- loopmod_loop_lex %>% mutate(age_scaled = (age - meanage_lex)/sdage_lex)
mod_loop_lex_alt <- glmer(lex ~ age_scaled * lastresp + lastlex +
(1 |ptcp),
family = binomial,
loopmod_loop_lex_alt)
summary(mod_loop_lex)
## can the presence or absence of language-like element in a child’s vocalization be predicted by whether the child’s most recent vocalization had received a response or not?
loopmod <- allinter %>%
mutate(vcm = ifelse(vcm=="C", 1, 0),
lex = ifelse(lex=="W",1,0),
lastlex = ifelse(lastvcm=="LEX",1,0),
lastcb = ifelse(lastvcm=="CB",1,0),
agebin = as.factor(agebin)) %>%
filter(spkr_bi == "CHI",
lastresp != "unknown",
lastresp != "adult")
# exclude children < 6 mo who don't produce lexical speech
loopmod_loop_lex <- loopmod %>% filter(agebin != "(0,6]") %>% droplevels()
mod_loop_lex <- glmer(lex ~ agebin * lastresp + lastlex +
(1 |ptcp),
family = binomial,
loopmod_loop_lex)
## effect still exists when we treat age as a continuous variable
meanage_lex <- mean(loopmod_loop_lex$age)
sdage_lex <- sd(loopmod_loop_lex$age)
loopmod_loop_lex_alt <- loopmod_loop_lex %>% mutate(age_scaled = (age - meanage_lex)/sdage_lex)
mod_loop_lex_alt <- glmer(lex ~ age_scaled * lastresp + lastlex +
(1 |ptcp),
family = binomial,
loopmod_loop_lex_alt)
summary(mod_loop_lex)
View(loopmod_lex)
View(loopmod_loop_lex)
View(loopmod)
## can the presence or absence of language-like element in a child’s vocalization be predicted by whether the child’s most recent vocalization had received a response or not?
loopmod <- allinter %>%
mutate(vcm = ifelse(vcm=="C", 1, 0),
lex = ifelse(lex=="W",1,0),
lastlex = ifelse(lastvcm=="LEX",1,0),
lastcb = ifelse(lastvcm=="CB",1,0),
agebin = as.factor(agebin)) %>%
filter(spkr_bi == "CHI",
lastresp != "unknown",
lastresp != "adult")
# exclude children < 6 mo who don't produce lexical speech
loopmod_lex <- loopmod %>% filter(agebin != "(0,6]") %>% droplevels()
mod_loop_lex <- glmer(lex ~ agebin * lastresp + lastlex +
(1 |ptcp),
family = binomial,
loopmod_lex)
## effect still exists when we treat age as a continuous variable
meanage_lex <- mean(loopmod_loop_lex$age)
sdage_lex <- sd(loopmod_loop_lex$age)
loopmod_loop_lex_alt <- loopmod_loop_lex %>% mutate(age_scaled = (age - meanage_lex)/sdage_lex)
mod_loop_lex_alt <- glmer(lex ~ age_scaled * lastresp + lastlex +
(1 |ptcp),
family = binomial,
loopmod_loop_lex_alt)
summary(mod_loop_lex)
loopmod <- allchi_loop %>%
mutate(vcm = ifelse(vcm=="C", 1, 0),
lex = ifelse(lex=="W",1,0),
lastlex = ifelse(lastvcm=="LEX",1,0),
lastcb = ifelse(lastvcm=="CB",1,0),
agebin = as.factor(agebin)) %>%
filter(spkr_bi == "CHI",
lastresp != "unknown",
lastresp != "adult")
# exclude children < 6 mo who don't produce lexical speech
loopmod_lex2 <- loopmod %>% filter(agebin != "(0,6]") %>% droplevels()
View(loopmod_lex)
View(loopmod_lex2)
test <- inner_join(loopmod_lex, loopmod_lex2)
newdata <- unique(
loopmod_loop_lex[,c(
"agebin",
"lastlex",
"lastresp")])
# Estimate the predicted counts
X <- model.matrix(
lme4::nobars(formula(mod_loop_lex)[-2]), newdata)
beta <- fixef(mod_loop_lex)
pred <- X %*% beta
# Convert these (linear) predictions back to the response scale
pred.ucount <- plogis(pred)
# Estimate confidence intervals
pred.psim <- MASS::mvrnorm(
1000, mu = beta, Sigma = vcov(mod_loop_lex))
pred.psim <- X %*% t(pred.psim)
# Convert these (linear) predictions back to the response scale
pred.ucount.psim <- plogis(pred.psim)
ci.ucount <- t(apply(
pred.ucount.psim, 1, quantile, c(0.025, 0.975), na.rm = TRUE))
ci.ucount <- data.frame(ci.ucount)
names(ci.ucount) <- c("ucount.low", "ucount.high")
# Combine the predictions info
# pred.ucount.all <- data.frame(newdata, pred.ucount)
pred.ucount.all <- data.frame(newdata, pred.ucount, ci.ucount)
pred.ucount.all <- left_join(pred.ucount.all,
dplyr::select(loopmod, c("agebin", "lastresp"))) %>%
filter(!(ucount.high == Inf))
# Plot the model estimates and real averages
pred.ucount <- pred.ucount.all %>%
group_by(agebin, lastresp, lastlex) %>%
summarize(
mean.pred.ucount = mean(pred.ucount),
mean.ucount.low = mean(ucount.low),
mean.ucount.high = mean(ucount.high))
loop_mod_plot <- ggplot(pred.ucount,
mapping = aes(x = agebin, y = mean.pred.ucount, color=lastresp, group = lastresp)) +
geom_point(position = position_dodge(width=0.5),size=4) +
geom_errorbar(mapping = aes(x = agebin, ymin = mean.ucount.low, ymax = mean.ucount.high, color=lastresp), position = position_dodge(width=0.5),
width=0.4, alpha=0.7, size=1.3, show.legend = FALSE) +
geom_line(position = position_dodge(width=0.5), size=1.5) +
facet_wrap(~lastlex, ncol = 1,
labeller = labeller(lastlex =
c("1" = "Prior utterance is lexical",
"0" = "Prior utterance is non-lexical"))) +
labs(x = "Age bin (months)",
y = "Probability of lexical vocalization") +
scale_color_manual(name = "Prior response",
breaks = c("yes", "no"),
labels = c("yes","no"),
values = c("yes" = "#EE4E34", "no" = "#FCDAB8")) +
coord_cartesian(ylim = c(0, 1)) +
theme_test(base_size = 20) +
theme(legend.position = c(.02, .98),
legend.justification = c("left", "top"),
plot.tag = element_text(face = "bold"))
loop_mod_plot
## can the presence or absence of language-like element in a child’s vocalization be predicted by whether the child’s most recent vocalization had received a response or not?
loopmod <- allinter %>%
mutate(vcm = ifelse(vcm=="C", 1, 0),
lex = ifelse(lex=="W",1,0),
lastlex = ifelse(lastvcm=="LEX",1,0),
lastcb = ifelse(lastvcm=="CB",1,0),
agebin = cut(age, breaks = seq(0,24,6), right = T)) %>%
filter(spkr_bi == "CHI",
lastresp != "unknown",
lastresp != "adult")
# exclude children < 6 mo who don't produce lexical speech
loopmod_lex <- loopmod %>% filter(agebin != "(0,6]") %>% droplevels()
mod_loop_lex <- glmer(lex ~ agebin * lastresp + lastlex +
(1 |ptcp),
family = binomial,
loopmod_lex)
## effect still exists when we treat age as a continuous variable
meanage_lex <- mean(loopmod_loop_lex$age)
sdage_lex <- sd(loopmod_loop_lex$age)
loopmod_loop_lex_alt <- loopmod_loop_lex %>% mutate(age_scaled = (age - meanage_lex)/sdage_lex)
mod_loop_lex_alt <- glmer(lex ~ age_scaled * lastresp + lastlex +
(1 |ptcp),
family = binomial,
loopmod_loop_lex_alt)
summary(mod_loop_lex)
setwd("/Users/regenchen/Documents/GitHub/TurnTaking_YJ/Tseltal_data")
anony <- readxl::read_xlsx("anonym.xlsx")
View(anony)
anony <- anony %>% unique()
View(anony)
random_values <- runif(length(anony$source))
anony$file_id <- random_values
random_values <- runif(length(anony$ptcp)) # Uniform distribution
# Create a named vector to map categories to random values
mapping <- setNames(random_values, unique(anony$ptcp))
# Map each category to its random value
random_mapped_values <- mapping[anony$ptcp]
random_mapped_values
anony$ptcp_id <- random_mapped_values
write.csv(anony, "anonym_key.csv")
anony <- read.csv("anonym_key.csv")
setwd("/Users/regenchen/Documents/GitHub/Tseltal-turn-taking/data")
allchi <- read.csv(here("data", "children_annot.csv"))
allotr <- read.csv(here("data", "caregivers_annot.csv"))
allinter <- read.csv(here("data", "interactions_annot.csv"))
anony <- read.csv("/Users/regenchen/Documents/GitHub/TurnTaking_YJ/Tseltal_data/anonym_key.csv")
allchi_an <- left_join(allchi, anony)
allotr_an <- left_join(allotr, anony)
allinter_an <- left_join(allinter, anony)
write.csv(allchi_an, "chi.csv")
write.csv(allotr_an, "otr.csv")
write.csv(allinter_an, "inter.csv")
View(anony)
setwd("/Users/regenchen/Documents/GitHub/TurnTaking_YJ")
library(tidyverse)
library(ggridges)
library(readxl)
library(data.table)
library(lme4)
library(texreg)
library(jtools)
library(gridExtra)
library(ggpubr)
library(cowplot)
# IMPORT DATA ####
## from .csv file
dat.raw <- read_csv("Tseltal_data/20230529-TS-all-annots.csv") %>%
### add agebin for future plotting
filter(age <= 24) %>%
mutate(agebin = cut(age, breaks = seq(0,24,6), right = T))
fileinfo <- read_xlsx("Tseltal_data/Annotation file tracker_Tseltal final corrections.xlsx") %>%
mutate(ptcp = ifelse(str_detect(Recording, "-rec[0-9]"),
substr(Recording, 1, 14),
substr(Recording, 1, 9))) %>%
### temporarily remove files that haven't been annotated by cl
filter(STATUS != "not yet started")
ptcpinfo <- dat.raw %>% select(ptcp) %>% unique() %>%
rename(internal_lab_id = ptcp) %>%
left_join(read_csv("Tseltal_data/tseltal2015-metadata.csv"))
mean(ptcpinfo$age)
median(ptcpinfo$age)
# Cleaning: delete vocal maturity unknown, speaker unknown ####
allchi <- dat.raw %>%
filter(tier_name %in% c("vcm@CHI", "lex@CHI", "mwu@CHI")) %>%
mutate(tier_name = str_remove(tier_name, "@CHI")) %>%
pivot_wider(names_from = "tier_name", values_from = "content",
id_cols = c("time_start", "time_end", "age","agebin", "source","ptcp")) %>%
unnest(cols = c(vcm, lex, mwu)) %>%
filter(vcm %in% c("N", "C")) %>%
# TEMP fix for missing mwu error
mutate(mwu = ifelse(vcm == "C" & lex == "W" & is.na(mwu), 1, mwu),
voc.type = case_when(
lex == "W" ~ "LEX",
vcm == "C" & (lex != "W"|is.na(lex)) ~ "CB",
vcm == "N" ~ "NCB",
TRUE ~ "oops"),
spkr = "CHI",
spkr_bi = "CHI") %>%
# TEMP: corrections needed!
filter(voc.type != "oops")
allotr <- dat.raw %>%
filter(tier_name == "quien@OTR") %>%
mutate(spkr = case_when(
str_detect(content, "[Mm]ujer|[Mm]adre|[Mm]amá|[Ss]eñora") ~ "woman",
str_detect(content, "[Hh]ombre|[Pp]adre|[Pp]apá|[Ss]eñor") ~ "man",
str_detect(content, "[Nn]iña|[Mm]uchacha") ~ "girl",
str_detect(content, "[Nn]iño|[Mm]uchacho|[Nn]uño") ~ "boy",
content %in% c("???", "aaa", NA) ~ "EXCLUDE"
)) %>%
filter(spkr != "EXCLUDE") %>%
select(time_start, time_end, source, ptcp, age, agebin, spkr) %>%
mutate(vcm = "no",lex = "no",mwu = "no", voc.type = "no",
spkr_bi = ifelse(spkr %in% c("man","woman") ,"ADU", "OTRCHI"))
alladult <- allotr %>%
filter(spkr %in% c("woman", "man"))
# Combine utterances from OTR and CHI
# Range utterance in time order for each file
UTTdat <- rbind(allchi, alladult) %>%
arrange(source, time_start) %>%
group_by(source) %>%
mutate(uttorder = row_number()) %>%
ungroup()
# Add attention ####
## Is certain speech within 2-second adults' attention window?
file <- unique(UTTdat$source)
atted_utt <- list()
for (i in seq_along(file)) {
transcript <- UTTdat[UTTdat$source == file[i],]
chi_utt <- transcript %>% filter(spkr == "CHI")
adu_utt <- transcript %>% filter(spkr != "CHI")
atted_utt[[i]] <- lapply(adu_utt$time_end,
function(x) {chi_utt[x+2>=chi_utt$time_start & x < chi_utt$time_start,]})
atted_utt[[i]] <- rbindlist(atted_utt[[i]])
}
atted_utt <- atted_utt %>%
rbindlist() %>%
unique() %>%
mutate(attended = "within attention")
allchi <- atted_utt %>%
dplyr::select(source, time_start, time_end, attended) %>%
right_join(allchi) %>%
mutate(attended = as.factor(if_else(is.na(attended),
"out of attention",
attended)))
## Find out adults' response to CHI
## i.e. where a CHI utterance is followed by an adult's utterance
speaker <- UTTdat$spkr
file <- UTTdat$source
seq <- UTTdat$uttorder
turnlist <- list()
for (i in 2:length(speaker)) {
if (speaker[i-1] == "CHI" & speaker[i] != "CHI" &
file[i-1] == file[i] & seq[i-1] == seq[i]-1){
turnlist[[i]] <- UTTdat[c(i-1,i),]
}
}
turns <- rbindlist(turnlist)
### adults' response time
speaker <- turns$spkr
file <- turns$source
start <- turns$time_start
end <- turns$time_end
utt_length <- turns$time_end - turns$time_start
gap <- vector()
for (j in 2:length(start)) {
if (speaker[j-1] == "CHI" & speaker[j] != "CHI" &
file[j-1] == file[j] & seq[i-1] == seq[i]-1){
if(-(start[j] - end[j-1]) < utt_length[j]){
gap[j-1] = start[j] - end[j-1]
} else
gap[j-1] = utt_length[j]
}
gap[length(start)] = NA
}
turns$gap <- gap
turns <- turns %>%
## keep the order of conversations
mutate(row_number = 1:n())
### delete turns with gap > 2s
rn <- turns$row_number
for (i in 1:length(gap)) {
if (!is.na(gap[i]) & gap[i] > 2){
rn[i] <- 0
rn[i+1] <-0
}
}
turns <- turns %>%
mutate(row_number = rn) %>%
filter(row_number != 0) %>%
mutate(row_number = 1:n())
allchi <- turns %>%
dplyr::select(time_start, time_end, source, gap) %>%
right_join(allchi, by = c("time_start", "time_end", "source")) %>%
mutate(response = ifelse(!is.na(gap), "responded", "not-responded"),
response = as.factor(response)) %>%
arrange(source, time_start) %>%
group_by(source) %>%
mutate(uttorder = row_number())
## Is the last chi utt responded or not?
# 1. find chi utt whose last chi utt is responded
file <- allchi$source
seq <- allchi$uttorder
resp <- allchi$response
vcm <- allchi$voc.type
lastresp <- vector()
lastvcm <- vector()
for (i in 2:length(seq)) {
if (resp[i-1] == "responded" &
file[i-1] == file[i] & seq[i-1] == seq[i]-1){
lastresp[i] <- "yes"
} else if(file[i-1] != file[i]){
lastresp[i] <- "unknown"
} else
lastresp[i] <- "no"
lastresp[1] <- "unknown"
}
allchi$lastresp <- lastresp
for (i in 2:length(seq)) {
if (file[i-1] == file[i] & seq[i-1] == seq[i]-1){
lastvcm[i] <- vcm[i-1]
} else
lastvcm[1] <- "unknown"
}
allchi$lastvcm <- lastvcm
## 2.1 exclude those >2s after last adu utt (they may be starting a new conversation)
allchi_loop<- allchi %>%
select(time_start, time_end, source, ptcp, spkr, response, lastresp, lastvcm) %>%
right_join(UTTdat) %>%
mutate(lastresp = ifelse(is.na(lastresp), "adult", lastresp)) %>%
arrange(source, time_start)
file <- allchi_loop$source
start <- allchi_loop$time_start
end <- allchi_loop$time_end
lastresp <- allchi_loop$lastresp
spkr <- allchi_loop$spkr_bi
for (i in 2:length(start)) {
if (lastresp[i] == "yes" &
file[i-1] == file[i] &
spkr[i-1] != spkr[i] &
end[i-1] + 2 < start[i]){
lastresp[i] <- "no"
} else {
lastresp[i] <- lastresp[i]
}}
allchi_loop$lastresp <- lastresp
## 2.2 differentiate "no" into initial utt and chi self continue
###### no difference between the two in the general model
# file <- allchi_loop$source
# start <- allchi_loop$time_start
# end <- allchi_loop$time_end
# lastresp <- allchi_loop$lastresp
# spkr <- allchi_loop$spkr_bi
# for (i in 2:length(start)) {
#  if(lastresp[i] == "no" &
#       file[i-1] == file[i] &
#       end[i-1] + 2 < start[i]){
#     lastresp[i] <- "initial"
#   } else if(lastresp[i] == "no" &
#       file[i-1] == file[i] &
#       spkr[i-1] == spkr[i] &
#       end[i-1] + 2 >= start[i]){
#     lastresp[i] <- "continue"
#   } else
#     lastresp[i] <- lastresp[i]
# }
# allchi_loop$lastresp <- lastresp
View(allchi_loop)
View(allchi)
View(allotr)
View(fileinfo)
anony <- read.csv("Tseltal_data/anonym_key.csv")
allinter_an <- left_join(allinter, anony)
View(allinter_an)
write.csv(allinter_an, "inter.csv")
setwd("/Users/regenchen/Documents/GitHub/Tseltal-turn-taking")
